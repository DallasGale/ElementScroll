{"version":3,"sources":["scripts/functions.ts","scripts/handlers.ts","scripts/index.ts"],"names":[],"mappings":";AAoCA,aA/BA,SAAgB,EACd,EACA,GAIO,OAFS,EAAgB,EASlC,SAAgB,EAAgB,GAEvB,OADmB,IAAR,EAQpB,SAAgB,EAAsB,GAC9B,IAAA,EAAS,KAAK,IAAI,GAAO,QAAQ,GAChC,OAAA,WAAW,GAOpB,SAAgB,EAAa,GAEpB,OADQ,EAAQ,wBAAwB,OADjD,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA/BA,QAAA,0BAAA,EAaA,QAAA,gBAAA,EASA,QAAA,sBAAA,EASA,QAAA,aAAA;;AC9Ba,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IANb,IAAA,EAAA,QAAA,eAMa,QAAA,kBAAoB,SAC/B,EACA,EACA,EACA,GAGM,IAAA,EAEI,CACN,MAAO,EACP,YAAa,EACb,UAAW,GACX,IAAK,KAKH,EAAe,EAAiB,wBAAwB,EACxD,EAAM,EAAA,gBACV,EAAA,0BAA0B,EAAA,sBAAsB,GAAe,IAE3D,EAAW,EAAA,sBAAsB,GAGrC,OAAA,EAAW,EAAc,aACzB,EAAW,EAAc,WAEzB,EAAS,MAAM,IAAM,EAAW,IAChC,EAAmB,UAAY,EAAS,gBAEpC,EAAS,UAAU,SAAS,SAC9B,EAAS,UAAU,OAAO,UAI5B,EAAW,EAAc,OACzB,EAAW,EAAc,aAIzB,EAAS,MAAM,IAAM,KACrB,EAAmB,UAAY,UAE/B,EAAS,UAAU,IAAI,SAGvB,EAAW,EAAc,WACzB,EAAW,EAAc,KAIzB,EAAS,MAAM,IAAM,OACrB,EAAmB,UAAY,YAG/B,EAAS,UAAU,IAAI,cAGvB;;ACjEJ,aAoDC,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAjDD,IAAA,EAAA,QAAA,cACA,EAAA,QAAA,eAGM,EAAmB,SAAS,eAAe,qBAC3C,EAAqB,SAAS,eAAe,uBAC7C,EAAW,SAAS,eAAe,YAGnC,EAAkB,SAAS,gBAC7B,EAAe,EAAgB,aAC7B,EAAiB,EAAA,aAAa,GAKpC,GAHA,QAAQ,IAAI,iBAAkB,GAG1B,OAAQ,CAEN,GAAA,eAAgB,CACZ,IAAA,EAAiB,IAAI,eAAe,SAAA,GACtB,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAS,CAAlB,IAAA,EAAK,EAAA,GACZ,EAAe,EAAM,OAAO,gBAGhC,EAAe,QAAQ,SAAS,iBAG9B,IAAA,EAAc,EAAiB,aAAe,EAC9C,EAAW,KAAK,KAAK,EAAiB,wBAAwB,GAElE,OAAO,iBACL,SACA,SAAA,IAIoB,KAFlB,EAAW,KAAK,KAAK,EAAiB,wBAAwB,KAG5D,EAAA,kBACE,EACA,EACA,EACA,IAMN,CAAE,SAAS","file":"scripts.c5138b71.js","sourceRoot":"..","sourcesContent":["/**\n *\n * @param {*} currentNumber\n * @param {*} totalNumber\n */\nexport function ConvertNumberToPercentage(\n  currentNumber: number,\n  totalNumber: number\n) {\n  const percent = currentNumber / totalNumber;\n  // console.log(\"Percentage\", percent);\n  return percent;\n}\n\n/**\n *\n * @param {*} value\n */\nexport function FormatToPercent(value: number) {\n  const formatted = value * 100;\n  return formatted;\n}\n\n/**\n *\n * @param value\n */\nexport function FormattedCurrentValue(value: number) {\n  const output = Math.abs(value).toFixed(3);\n  return parseFloat(output);\n}\n\n/**\n *\n * @param element\n */\nexport function ScrollerSize(element: HTMLElement) {\n  const output = element.getBoundingClientRect().height;\n  return output;\n}\n","import {\n  FormatToPercent,\n  ConvertNumberToPercentage,\n  FormattedCurrentValue\n} from \"./functions\";\n\nexport const handleScrollEvent = function scrollHandler(\n  size: number,\n  referenceElement: HTMLElement,\n  scroller: HTMLElement,\n  percentageScrolled: HTMLElement\n) {\n  // * State Machine\n  const STATUS = {\n    id: \"Progress\",\n    states: {\n      start: 0,\n      snapToStart: 2,\n      snapToEnd: 98,\n      end: 100\n    }\n  };\n  // let currentState = STATUS.states.start;\n\n  const currentValue = referenceElement.getBoundingClientRect().y;\n  const num = FormatToPercent(\n    ConvertNumberToPercentage(FormattedCurrentValue(currentValue), size)\n  );\n  const progress = FormattedCurrentValue(num);\n  // console.log(typeof progress);\n  if (\n    progress > STATUS.states.snapToStart &&\n    progress < STATUS.states.snapToEnd\n  ) {\n    scroller.style.top = progress + \"%\";\n    percentageScrolled.innerText = progress.toString();\n    //  CSS\n    if (scroller.classList.contains(\"snap\")) {\n      scroller.classList.remove(\"snap\");\n    }\n    return;\n  } else if (\n    progress > STATUS.states.start &&\n    progress < STATUS.states.snapToStart\n  ) {\n    // Set State\n    // currentState = STATUS.states.start;\n    scroller.style.top = \"0%\";\n    percentageScrolled.innerText = \"0%\";\n    //  CSS\n    scroller.classList.add(\"snap\");\n    return;\n  } else if (\n    progress > STATUS.states.snapToEnd &&\n    progress < STATUS.states.end\n  ) {\n    // Set State\n    // currentState = STATUS.states.end;\n    scroller.style.top = \"100%\";\n    percentageScrolled.innerText = \"100%\";\n\n    // CSS\n    scroller.classList.add(\"snap\");\n    return;\n  } else {\n    return;\n  }\n\n  // if ((currentState = STATUS.states.start)) {\n  //   console.log(\"start\");\n\n  // }\n  // if ((currentState = STATUS.states.end)) {\n  //   console.log(\"end\");\n  // }\n};\n","// todo: Add State Machine: for idle / scrollling to be added to event listener\n// todo: Add Up and Down arrows\n\nimport { handleScrollEvent } from \"./handlers\";\nimport { ScrollerSize } from \"./functions\";\n\n// * DOM Elements\nconst referenceElement = document.getElementById(\"reference-element\");\nconst percentageScrolled = document.getElementById(\"percentage-scrolled\");\nconst scroller = document.getElementById(\"scroller\");\n\n// * Element Measurements\nconst documentElement = document.documentElement;\nlet windowHeight = documentElement.clientHeight;\nconst scrollerHeight = ScrollerSize(scroller);\n\nconsole.log(\"scrollerHeight\", scrollerHeight);\n\n// * Script\nif (window) {\n  // * Observer\n  if (ResizeObserver) {\n    const resizeObserver = new ResizeObserver(entries => {\n      for (let entry of entries) {\n        windowHeight = entry.target.clientHeight;\n      }\n    });\n    resizeObserver.observe(document.documentElement);\n  }\n\n  let totalHeight = referenceElement.clientHeight - windowHeight;\n  let negOrPos = Math.sign(referenceElement.getBoundingClientRect().y);\n  // let isScrolling = false;\n  window.addEventListener(\n    \"scroll\",\n    e => {\n      // isScrolling = true;\n      negOrPos = Math.sign(referenceElement.getBoundingClientRect().y);\n\n      if (negOrPos === -1) {\n        handleScrollEvent(\n          totalHeight,\n          referenceElement,\n          scroller,\n          percentageScrolled\n        );\n      } else {\n        return;\n      }\n    },\n    { passive: true }\n  );\n}\n"]}